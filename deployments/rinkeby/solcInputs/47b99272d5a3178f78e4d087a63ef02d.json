{
  "language": "Solidity",
  "sources": {
    "contracts/Charity.sol": {
      "content": "//SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nerror Charity__InputAnAmountGreaterThanZero();\nerror Charity__YouAreNotTheOwnerOfThisCharity();\nerror Charity__MoreThanRequired(uint256 maxAmountToDonate);\nerror Charity__CharityClosed();\nerror Charity__InsufficientBalance(uint256 maxAmountToWithdraw);\nerror Charity__AlreadyEnded();\nerror Charity__NotEndedYet();\nerror Charity__CharityBalanceEmpty();\n\ncontract Charity {\n    struct Donations {\n        address contributor;\n        uint256 amountDonated;\n        uint256 charityId;\n    }\n\n    struct Charities {\n        address owner;\n        uint256 amountNeeded;\n        uint256 amountGotten;\n        bool withdrawalStatus;\n        bool charityState;\n        uint256 charityId;\n        string descriptionCid;\n        string fileCid;\n    }\n\n    Charities[] private charities;\n    Donations[] private donations;\n\n    function createFundMe(\n        uint256 _amountNeeded,\n        string memory _descriptionCid,\n        string memory _fileCid\n    ) public {\n        charities.push(\n            Charities(\n                msg.sender,\n                (_amountNeeded),\n                0,\n                false,\n                true,\n                charities.length,\n                _descriptionCid,\n                _fileCid\n            )\n        );\n    }\n\n    function donate(uint256 _charityId) public payable {\n        if (msg.value == 0) {\n            revert Charity__InputAnAmountGreaterThanZero();\n        }\n        if (charities[_charityId].charityState == false) {\n            revert Charity__CharityClosed();\n        }\n\n        if (\n            (charities[_charityId].amountNeeded -\n                charities[_charityId].amountGotten) >\n            msg.value &&\n            charities[_charityId].charityState == true\n        ) {\n            charities[_charityId].amountGotten += msg.value;\n\n            donations.push(Donations(msg.sender, msg.value, _charityId));\n        } else if (\n            (charities[_charityId].amountNeeded -\n                charities[_charityId].amountGotten) ==\n            msg.value &&\n            charities[_charityId].charityState == true\n        ) {\n            charities[_charityId].charityState = false;\n            charities[_charityId].amountGotten += msg.value;\n\n            donations.push(Donations(msg.sender, msg.value, _charityId));\n        } else if (\n            (charities[_charityId].amountNeeded -\n                charities[_charityId].amountGotten <\n                msg.value) && charities[_charityId].charityState == true\n        ) {\n            revert Charity__MoreThanRequired(\n                (charities[_charityId].amountNeeded -\n                    charities[_charityId].amountGotten)\n            );\n        }\n    }\n\n    function withdraw(uint256 _charityId) public {\n        if (msg.sender != charities[_charityId].owner) {\n            revert Charity__YouAreNotTheOwnerOfThisCharity();\n        }\n        if (charities[_charityId].charityState == true) {\n            revert Charity__NotEndedYet();\n        }\n        if (charities[_charityId].amountGotten == 0) {\n            revert Charity__CharityBalanceEmpty();\n        }\n        charities[_charityId].withdrawalStatus = true;\n        (bool callSuccess, ) = payable(msg.sender).call{\n            value: charities[_charityId].amountGotten\n        }(\"\");\n        require(callSuccess, \"call failed\");\n    }\n\n    function endFundMe(uint256 _charityId) public {\n        if (msg.sender != charities[_charityId].owner) {\n            revert Charity__YouAreNotTheOwnerOfThisCharity();\n        }\n        if (charities[_charityId].charityState == false) {\n            revert Charity__AlreadyEnded();\n        }\n\n        charities[_charityId].charityState = false;\n    }\n\n    function getAllDonations() public view returns (Donations[] memory) {\n        Donations[] memory temporary = new Donations[](donations.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < donations.length; i++) {\n            temporary[counter] = donations[i];\n            counter++;\n        }\n        Donations[] memory result = new Donations[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getDonationsByCharity(uint256 _charityId)\n        public\n        view\n        returns (Donations[] memory)\n    {\n        Donations[] memory temporary = new Donations[](donations.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < donations.length; i++) {\n            if (_charityId == donations[i].charityId) {\n                temporary[counter] = donations[i];\n                counter++;\n            }\n        }\n        Donations[] memory result = new Donations[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getMyDonations(address _contributor)\n        public\n        view\n        returns (Donations[] memory)\n    {\n        Donations[] memory temporary = new Donations[](donations.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < donations.length; i++) {\n            if (_contributor == donations[i].contributor) {\n                temporary[counter] = donations[i];\n                counter++;\n            }\n        }\n        Donations[] memory result = new Donations[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getAllCharities() public view returns (Charities[] memory) {\n        Charities[] memory temporary = new Charities[](charities.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < charities.length; i++) {\n            temporary[counter] = charities[i];\n            counter++;\n        }\n        Charities[] memory result = new Charities[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getAddressCharities(address _user)\n        public\n        view\n        returns (Charities[] memory)\n    {\n        Charities[] memory temporary = new Charities[](charities.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < charities.length; i++) {\n            if (_user == charities[i].owner) {\n                temporary[counter] = charities[i];\n                counter++;\n            }\n        }\n        Charities[] memory result = new Charities[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getOpenCharities() public view returns (Charities[] memory) {\n        Charities[] memory temporary = new Charities[](charities.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < charities.length; i++) {\n            if (charities[i].charityState == true) {\n                temporary[counter] = charities[i];\n                counter++;\n            }\n        }\n        Charities[] memory result = new Charities[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n\n    function getClosedCharities() public view returns (Charities[] memory) {\n        Charities[] memory temporary = new Charities[](charities.length);\n        uint256 counter = 0;\n        for (uint256 i = 0; i < charities.length; i++) {\n            if (charities[i].charityState == false) {\n                temporary[counter] = charities[i];\n                counter++;\n            }\n        }\n        Charities[] memory result = new Charities[](counter);\n        for (uint256 i = 0; i < counter; i++) {\n            result[i] = temporary[i];\n        }\n        return result;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}